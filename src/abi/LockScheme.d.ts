/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LockSchemeInterface extends ethers.utils.Interface {
  functions: {
    "bonusPercent()": FunctionFragment;
    "forfeitedBonuses()": FunctionFragment;
    "lmcContract()": FunctionFragment;
    "lockPeriod()": FunctionFragment;
    "rampUpPeriod()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "lock(address,uint256)": FunctionFragment;
    "exit(address)": FunctionFragment;
    "updateUserAccruedRewards(address,uint256)": FunctionFragment;
    "getUserBonus(address)": FunctionFragment;
    "getUserAccruedReward(address)": FunctionFragment;
    "getUserLockedStake(address)": FunctionFragment;
    "hasUserRampUpEnded(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bonusPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forfeitedBonuses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lmcContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rampUpPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateUserAccruedRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBonus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccruedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockedStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserRampUpEnded",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bonusPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forfeitedBonuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lmcContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rampUpPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserAccruedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccruedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserRampUpEnded",
    data: BytesLike
  ): Result;

  events: {
    "Exit(address,uint256,bool)": EventFragment;
    "Lock(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
}

export class LockScheme extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockSchemeInterface;

  functions: {
    bonusPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    forfeitedBonuses(overrides?: CallOverrides): Promise<[BigNumber]>;

    lmcContract(overrides?: CallOverrides): Promise<[string]>;

    lockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    rampUpPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        accruedReward: BigNumber;
        lockInitialStakeBlock: BigNumber;
      }
    >;

    lock(
      _userAddress: string,
      _amountToLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserAccruedRewards(
      _userAddress: string,
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserBonus(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bonus: BigNumber }>;

    getUserAccruedReward(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLockedStake(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasUserRampUpEnded(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  bonusPercent(overrides?: CallOverrides): Promise<BigNumber>;

  forfeitedBonuses(overrides?: CallOverrides): Promise<BigNumber>;

  lmcContract(overrides?: CallOverrides): Promise<string>;

  lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  rampUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      accruedReward: BigNumber;
      lockInitialStakeBlock: BigNumber;
    }
  >;

  lock(
    _userAddress: string,
    _amountToLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    _userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserAccruedRewards(
    _userAddress: string,
    _rewards: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserBonus(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserAccruedReward(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLockedStake(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasUserRampUpEnded(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    bonusPercent(overrides?: CallOverrides): Promise<BigNumber>;

    forfeitedBonuses(overrides?: CallOverrides): Promise<BigNumber>;

    lmcContract(overrides?: CallOverrides): Promise<string>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rampUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        accruedReward: BigNumber;
        lockInitialStakeBlock: BigNumber;
      }
    >;

    lock(
      _userAddress: string,
      _amountToLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(_userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateUserAccruedRewards(
      _userAddress: string,
      _rewards: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserBonus(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccruedReward(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockedStake(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasUserRampUpEnded(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Exit(
      _userAddress?: string | null,
      bonus?: null,
      isBonusForreied?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { _userAddress: string; bonus: BigNumber; isBonusForreied: boolean }
    >;

    Lock(
      _userAddress?: string | null,
      _amountLocked?: null,
      _additionalReward?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        _userAddress: string;
        _amountLocked: BigNumber;
        _additionalReward: BigNumber;
      }
    >;
  };

  estimateGas: {
    bonusPercent(overrides?: CallOverrides): Promise<BigNumber>;

    forfeitedBonuses(overrides?: CallOverrides): Promise<BigNumber>;

    lmcContract(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rampUpPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      _userAddress: string,
      _amountToLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserAccruedRewards(
      _userAddress: string,
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserBonus(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccruedReward(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockedStake(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasUserRampUpEnded(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bonusPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forfeitedBonuses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lmcContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rampUpPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _userAddress: string,
      _amountToLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserAccruedRewards(
      _userAddress: string,
      _rewards: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserBonus(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccruedReward(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLockedStake(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasUserRampUpEnded(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
