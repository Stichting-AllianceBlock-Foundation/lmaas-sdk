name: publish

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  CI: true
  CACHE_TOKEN: b8d5acbf
  NPM_REGISTRY: npm.pkg.github.com
  SOURCE_DIR: dist

jobs:
  version:
    name: version check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '12.x'

      - name: Get local version
        id: local_version
        run: echo "value=$(cat ./package.json | jq --raw-output .version)" >> $GITHUB_OUTPUT

      - name: Authenticate GPR
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Get registry version
        id: registry_version
        run: echo "value=$(npm view ${{ github.repository }} version)" >> $GITHUB_OUTPUT

      - name: Validate version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const local_version = '${{ steps.local_version.outputs.value }}';
            const registry_version = '${{ steps.registry_version.outputs.value }}';
            core.info(`Repository version: ${local_version}`);
            core.info(`Registry version: ${registry_version}`);
            if (registry_version === local_version) {
              core.setFailed('Please bump version before merging');
            }

  test:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '12.x'

      - name: Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get yarn cache directory path
        id: yarn-cache-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ env.CACHE_TOKEN }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Prepare .npmrc
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts

      - name: Linting
        run: yarn lint

      # - name: Prettier
      #   run: yarn format

      # - name: Unit tests
      #   run: yarn test:coverage

      # - name: Upload coverage
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-reports
      #     path: coverage/

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '12.x'

      - name: Get yarn cache directory path
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ env.CACHE_TOKEN }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Prepare .npmrc
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts

      - name: Publish
        run: yarn publish

      - name: Get local version
        id: local_version
        run: echo ::set-output name=value::$(cat ./package.json | jq --raw-output .version)

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ steps.local_version.outputs.value }}",
              sha: context.sha
            })

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ${{ env.SOURCE_DIR }}
