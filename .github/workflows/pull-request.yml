name: ci

on:
  pull_request:
    branches:
      - develop
      - main

permissions:
  contents: read
  packages: read

env:
  CI: true
  CACHE_TOKEN: 50001cff
  NPM_REGISTRY: registry.npmjs.org

jobs:
  version:
    name: version check
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get local version
        id: local_version
        run: echo "value=$(cat ./package.json | jq --raw-output .version)" >> $GITHUB_ENV

      - name: Authenticate GPR
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc

      - name: Get registry version
        id: registry_version
        run: echo "value=$(pnpm view ${{ github.repository }} version)" >> $GITHUB_ENV

      - name: Validate version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const local_version = '${{ steps.local_version.outputs.value }}';
            const registry_version = '${{ steps.registry_version.outputs.value }}';
            core.info(`Repository version: ${local_version}`);
            core.info(`Registry version: ${registry_version}`);
            if (registry_version === local_version) {
              core.setFailed('Please bump version before merging');
            }

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.CACHE_TOKEN }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Prepare .npmrc
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Build
        run: pnpm run build

      - name: Linting
        run: pnpm run lint
