import { useWeb3React } from '@web3-react/core';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useGlobalContext } from './_app';
import { injected } from '../utils/utils';
import { useEffect, useState } from 'react';
import { getProtocolByChainId } from '../utils/utils';
import { StakerSDK, ConfigWrapper } from '@stichting-allianceblock-foundation/lmaas-sdk';
import { Web3Provider } from '@ethersproject/providers';

const Home: NextPage = () => {
  const { stakerSdk, configWrapper, setStakerSdk } = useGlobalContext();
  const { activate, active, library, chainId, account } = useWeb3React();
  const [campaigns, setCampaigns] = useState<any[]>([]);

  useEffect(() => {
    setStakerSdk(getSDK(chainId!, library, configWrapper));
  }, [chainId, account, configWrapper.config]);

  function getSDK(
    chainId: number,
    provider: Web3Provider,
    configWrapper: ConfigWrapper,
  ): StakerSDK | null {
    let sdk: StakerSDK | null = null;

    if (chainId && configWrapper.config) {
      sdk = new StakerSDK(provider, getProtocolByChainId(chainId), configWrapper.config.config);
    }

    return sdk;
  }

  useEffect(() => {
    async function fetchLmCampaignInfo() {
      const configCampaigns = configWrapper.getLmCampaigns('ewc');
      const signer = await library.getSigner();

      const cardDataPR = configCampaigns.map(campaign =>
        stakerSdk?.campaignWrapper.getCardData(signer, campaign),
      );

      const cardDataFull = await Promise.all(cardDataPR);
      setCampaigns(cardDataFull);
    }

    if (configWrapper.config && library && active) {
      fetchLmCampaignInfo();
    }

    return () => {
      setCampaigns([]);
    };
  }, [configWrapper.config, library]);

  const handleWithdrawClaim = async (campaignAddress: string): Promise<void> => {
    await stakerSdk?.campaignWrapper.exit(campaignAddress);
  };

  const handleStake = async (campaignAddress: string): Promise<void> => {
    await stakerSdk?.campaignWrapper.stake(campaignAddress, '1');
  };

  return (
    <div>
      <Head>
        <title>Example StakerSDK</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main>
        <h1>Example SDK integration</h1>
        <button disabled={active} onClick={() => activate(injected)}>
          {active ? 'Connected - MetaMask' : 'Activate'}
        </button>
        {campaigns.map((campaign, index) => {
          return (
            <article
              key={index}
              style={{
                border: '1px solid black',
                padding: '20px',
                margin: '20px',
                borderRadius: '20px',
              }}
            >
              <p>Campaign Address: {campaign.campaign.campaignAddress}</p>
              <p>Total Staked: {campaign.totalStaked}</p>
              <p>APY: {campaign.apy.toFixed(2)}</p>
              <ul>
                {campaign.tuple.map((item: string) => {
                  return <li>{item}</li>;
                })}
              </ul>
              <button onClick={() => handleStake(campaign.campaign.campaignAddress)}>Stake</button>
              <button onClick={() => handleWithdrawClaim(campaign.campaign.campaignAddress)}>
                Withdraw and Claim
              </button>
            </article>
          );
        })}
      </main>
    </div>
  );
};

export default Home;
